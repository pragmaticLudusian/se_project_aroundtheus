!function(){"use strict";class e{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._selector=t}renderItems(){this._container=document.querySelector(this._selector),this._items.forEach((e=>{this._renderer(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";this._container[t](e)}}class t{constructor(e,t,s,r,i){let{name:n,link:a,_id:o,isLiked:c}=e;this._name=n,this._link=a,this._id=o,this._isLiked=c,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=r,this._handleCardLike=i}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this.getInfo())})),this._cardLike.addEventListener("click",(()=>{this._handleCardLike(this)})),this._cardDelete.addEventListener("click",(()=>{this._handleCardDelete(this)}))}likeCard(e){this._isLiked=e;const t=this._isLiked?"add":"remove";this._cardLike.classList[t]("card__like_active")}deleteCard(){this._cardDelete.closest(".card").remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardLike=this._cardElement.querySelector(".card__like"),this.likeCard(this._isLiked),this._cardDelete=this._cardElement.querySelector(".card__delete-button"),this._setEventListeners(),this._cardElement}getInfo(){return{name:this._name,link:this._link,id:this._id,isLiked:this._isLiked}}}class s{constructor(e,t){this._config=e,this._form=t}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._config.inputSelector)),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(this,e)}))})),this._buttonElement=this._form.querySelector(this._config.submitButtonSelector)}_checkInputValidity(e,t){this._hasInvalidInput(this._inputList)?(this._showInputError(this,t),this.disableButton()):(this._hideInputError(this,t),this.enableButton())}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_showInputError(e,t){const s=this._form.querySelector(`#${t.id}_error`);s.textContent=t.validationMessage,s.classList.add(this._config.activeErrorClass)}_hideInputError(e,t){const s=this._form.querySelector(`#${t.id}_error`);s.classList.remove(this._config.activeErrorClass),s.textContent=""}disableButton(){this._buttonElement.classList.replace(this._config.activeButtonClass,this._config.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}enableButton(){this._buttonElement.removeAttribute("disabled"),this._buttonElement.classList.replace(this._config.inactiveButtonClass,this._config.activeButtonClass)}resetFormValidation(){this._inputList.forEach((e=>{this._hideInputError(this,e)})),this.disableButton()}enableValidation(){this._setEventListeners()}}class r{constructor(e){this._popup=e}setEventListeners(){this._popup.addEventListener("click",(e=>{this._popup===e.target&&this.close()})),this._popup.querySelector(".modal__close-button").addEventListener("click",(()=>this.close()))}open(){this._escCallback=this._handleEscClose.bind(this),document.addEventListener("keydown",this._escCallback),this._popup.classList.add("modal_opened")}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._escCallback)}_handleEscClose(e){"Escape"===e.key&&this.close()}}class i extends r{constructor(e,t,s,r,i){super(e),this._handleSubmit=t,this._inputSelector=s,this._submitSelector=r,this._submitText=i,this._submitOriginal=this._submitSelector.textContent}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{this._handleSubmit(e,this._getInputValues())})),this._inputFields=Array.from(this._popup.querySelectorAll(this._inputSelector))}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}setRender(e){this._submitSelector.textContent=e?this._submitText:this._submitOriginal}}const n={inputSelector:".form__input",submitButtonSelector:".form__save-button",inactiveButtonClass:"form__save-button_inactive",activeButtonClass:"form__save-button_active",activeErrorClass:"form__error_active"},a=document.querySelector(".profile"),o=a.querySelector(".profile__edit-button"),c=a.querySelector(".profile__name"),l=a.querySelector(".profile__description"),d=a.querySelector(".profile__avatar"),h=a.querySelector(".profile__avatar-edit"),_=document.querySelector("#modal_profile_info"),u=document.forms.profile_info_form,m=u.name,p=u.description,f=u.profile_info_form_save,v=document.querySelector("#modal_profile_avatar"),E=document.forms.profile_avatar_form,b=E.avatar,g=E.profile_avatar_form_save,k=a.querySelector(".profile__add-button"),L=document.querySelector("#modal_card-add"),C=document.forms["card-add_form"],S=C["card-add_form_save"],y=document.querySelector("#modal_card-view"),I=y.querySelector(".modal__image"),j=y.querySelector(".modal__caption"),w=document.querySelector("#modal_card-delete"),P=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserProfileData(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while getting user data`))).catch((e=>Promise.reject(e)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while getting cards data`))).catch((e=>Promise.reject(e)))}getUserAndCards(e){return Promise.all(e).catch((e=>Promise.reject("Something went wrong :(",e)))}setUserProfileData(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while updating user data`))).catch((e=>Promise.reject(e)))}addNewCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while adding a new card`))).catch((e=>Promise.reject(e)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while deleting a card`))).catch((e=>Promise.reject(e)))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while liking a card`))).catch((e=>Promise.reject(e)))}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while unliking a card`))).catch((e=>Promise.reject(e)))}setUserProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`error ${e.status} while updating an avatar`))).catch((e=>Promise.reject(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{"content-type":"application/json",authorization:"c48564f3-ecfb-4a65-b35d-031aabc842ce"}});let q,U;P.getUserAndCards([P.getUserProfileData().then((e=>{let{_id:t,name:s,about:r,avatar:i}=e;U=t,x.setUserInfo(s,r),x.setAvatar(i)})).catch((e=>{console.error(e)})),P.getInitialCards().then((t=>{q=new e({items:t,renderer:e=>{const t=$(e);q.addItem(t)}},".gallery__cards"),q.renderItems()})).catch((e=>{console.error(e)}))]).catch((e=>{console.error(e)}));const $=e=>new t(e,"#card-template",V,O,N).generateCard(),A={};Array.from(document.forms).forEach((e=>{const t=new s(n,e);A[e.id]=t,t.enableValidation()}));const x=new class{constructor(e){let{name:t,description:s,avatar:r}=e;this._nameElement=t,this._jobElement=s,this._avatarElement=r}getUserInfo(){return{name:this._nameElement.textContent,description:this._jobElement.textContent}}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}getAvatar(){return this._avatarElement.src}setAvatar(e){this._avatarElement.src=e}}({name:c,description:l,avatar:d});o.addEventListener("click",(()=>{const{name:e,description:t}=x.getUserInfo();m.value=e,p.value=t,A.profile_info_form.resetFormValidation(),D.open()}));const D=new i(_,((e,t)=>{let{name:s,description:r}=t;e.preventDefault(),D.setRender(!0),P.setUserProfileData(s,r).then((()=>{x.setUserInfo(s,r)})).catch((e=>{console.error(e)})).finally((()=>{D.close(),D.setRender(!1)}))}),n.inputSelector,f,"Saving...");D.setEventListeners(),h.addEventListener("click",(()=>{b.value=d.src,B.open()}));const B=new i(v,((e,t)=>{let{avatar:s}=t;e.preventDefault(),B.setRender(!0),P.setUserProfileAvatar(s).then((()=>{d.src=s})).catch((e=>{console.error(e)})).finally((()=>{B.close(),B.setRender(!1)}))}),n.inputSelector,g,"Saving...");B.setEventListeners(),k.addEventListener("click",(()=>{T.open()}));const T=new i(L,((e,t)=>{let{title:s,link:r}=t;e.preventDefault(),T.setRender(!0),P.addNewCard(s,r).then((e=>{const t=$(e);q.addItem(t,"prepend")})).catch((e=>{console.error(e)})).finally((()=>{T.close(),T.setRender(!1),C.reset(),A["card-add_form"].disableButton()}))}),n.inputSelector,S,"Creating...");function V(e){R.open(e)}T.setEventListeners();const R=new class extends r{constructor(e,t){super(e),this._modalElements=t}open(e){let{name:t,link:s}=e;this._modalElements.image.src=s,this._modalElements.image.alt=t,this._modalElements.caption.textContent=t,super.open()}}(y,{image:I,caption:j});function N(e){const t=e.getInfo().isLiked?"unlikeCard":"likeCard";P[t](e.getInfo().id).then((t=>{e.likeCard(t.isLiked)})).catch((e=>{console.error(e)}))}function O(e){F.open(e)}R.setEventListeners();const F=new class extends r{constructor(e,t){super(e),this._handleSubmit=t}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{this._handleSubmit(e,this._initiator)}))}open(e){this._initiator=e,super.open()}}(w,((e,t)=>{e.preventDefault(),P.deleteCard(t.getInfo().id).then((()=>{t.deleteCard()})).catch((e=>{console.error(e)})).finally((()=>{F.close()}))}));F.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,