!function(){"use strict";class e{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._selector=t}renderItems(){this._container=document.querySelector(this._selector),this._items.forEach((e=>{this._renderer(e)}))}addItem(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";this._container[t](e)}}class t{constructor(e,t,s,r,i){let{name:n,link:a,_id:o,isLiked:l}=e;this._name=n,this._link=a,this._id=o,this._isLiked=l,this._cardSelector=t,this._handleImageClick=s,this._handleCardDelete=r,this._handleCardLike=i}_setEventListeners(){this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this.getInfo())})),this._cardLike.addEventListener("click",(()=>{this._handleCardLike(this)})),this._cardDelete.addEventListener("click",(()=>{this._handleCardDelete(this)}))}likeCard(e){this._isLiked=e;const t=this._isLiked?"add":"remove";this._cardLike.classList[t]("card__like_active")}deleteCard(){this._cardDelete.closest(".card").remove(),this._cardElement=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}generateCard(){return this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardLike=this._cardElement.querySelector(".card__like"),this.likeCard(this._isLiked),this._cardDelete=this._cardElement.querySelector(".card__delete-button"),this._setEventListeners(),this._cardElement}getInfo(){return{name:this._name,link:this._link,id:this._id,isLiked:this._isLiked}}}class s{constructor(e,t){this._config=e,this._form=t}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._config.inputSelector)),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(this,e)}))})),this._buttonElement=this._form.querySelector(this._config.submitButtonSelector)}_checkInputValidity(e,t){this._hasInvalidInput(this._inputList)?(this._showInputError(this,t),this.disableButton()):(this._hideInputError(this,t),this.enableButton())}_hasInvalidInput(e){return e.some((e=>!e.validity.valid))}_showInputError(e,t){const s=this._form.querySelector(`#${t.id}_error`);s.textContent=t.validationMessage,s.classList.add(this._config.activeErrorClass)}_hideInputError(e,t){const s=this._form.querySelector(`#${t.id}_error`);s.classList.remove(this._config.activeErrorClass),s.textContent=""}disableButton(){this._buttonElement.classList.replace(this._config.activeButtonClass,this._config.inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)}enableButton(){this._buttonElement.removeAttribute("disabled"),this._buttonElement.classList.replace(this._config.inactiveButtonClass,this._config.activeButtonClass)}resetFormValidation(){this._inputList.forEach((e=>{this._hideInputError(this,e)})),this.disableButton()}enableValidation(){this._setEventListeners()}}class r{constructor(e){this._popup=e}setEventListeners(){this._popup.addEventListener("click",(e=>{this._popup===e.target&&this.close()})),this._popup.querySelector(".modal__close-button").addEventListener("click",(()=>this.close()))}open(){this._escCallback=this._handleEscClose.bind(this),document.addEventListener("keydown",this._escCallback),this._popup.classList.add("modal_opened")}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._escCallback)}_handleEscClose(e){"Escape"===e.key&&this.close()}}class i extends r{constructor(e,t,s,r){super(e),this._handleSubmit=t,this._inputSelector=s,this._submitSelector=r,this._submitText=this._submitSelector.textContent}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{this._handleSubmit(e,this._getInputValues())})),this._inputFields=Array.from(this._popup.querySelectorAll(this._inputSelector))}_getInputValues(){const e={};return this._inputFields.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputFields.forEach((t=>{t.value=e[t.name]}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitSelector.textContent=e?t:this._submitText}}const n={inputSelector:".form__input",submitButtonSelector:".form__save-button",inactiveButtonClass:"form__save-button_inactive",activeButtonClass:"form__save-button_active",activeErrorClass:"form__error_active"},a=document.querySelector(".profile"),o=a.querySelector(".profile__edit-button"),l=a.querySelector(".profile__name"),d=a.querySelector(".profile__description"),c=a.querySelector(".profile__avatar"),h=a.querySelector(".profile__avatar-edit"),_=document.querySelector("#modal_profile_info"),u=document.forms.profile_info_form,m=(u.name,u.description,u.profile_info_form_save),p=document.querySelector("#modal_profile_avatar"),v=document.forms.profile_avatar_form,f=(v.avatar,v.profile_avatar_form_save),E=a.querySelector(".profile__add-button"),b=document.querySelector("#modal_card-add"),L=document.forms["card-add_form"],g=L["card-add_form_save"],k=document.querySelector("#modal_card-view"),C=k.querySelector(".modal__image"),S=k.querySelector(".modal__caption"),y=document.querySelector("#modal_card-delete"),I=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_request(e,t){return fetch(e,t).then(this._checkResponse)}_checkResponse(e){return e.ok?e.json():Promise.reject(`error ${e.status}`)}getUserProfileData(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}getUserAndCards(e){return Promise.all(e)}setUserProfileData(e,t){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})})}addNewCard(e,t){return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}unlikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}setUserProfileAvatar(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{"content-type":"application/json",authorization:"c48564f3-ecfb-4a65-b35d-031aabc842ce"}});let q,U;I.getUserAndCards([I.getUserProfileData(),I.getInitialCards()]).then((t=>{let[{_id:s,name:r,about:i,avatar:n},a]=t;U=s,D.setUserInfo(r,i),D.setAvatar(n),q=new e({items:a,renderer:e=>{const t=A(e);q.addItem(t)}},".gallery__cards"),q.renderItems()})).catch((e=>{console.error(e)}));const A=e=>new t(e,"#card-template",V,N,j).generateCard(),w={};function x(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}Array.from(document.forms).forEach((e=>{const t=new s(n,e);w[e.id]=t,t.enableValidation()}));const D=new class{constructor(e){let{name:t,description:s,avatar:r}=e;this._nameElement=t,this._jobElement=s,this._avatarElement=r}getUserInfo(){return{name:this._nameElement.textContent,description:this._jobElement.textContent}}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}getAvatar(){return{avatar:this._avatarElement.src}}setAvatar(e){this._avatarElement.src=e}}({name:l,description:d,avatar:c});o.addEventListener("click",(()=>{B.setInputValues(D.getUserInfo()),w.profile_info_form.resetFormValidation(),B.open()}));const B=new i(_,((e,t)=>{let{name:s,description:r}=t;e.preventDefault(),x((()=>I.setUserProfileData(s,r).then((()=>{D.setUserInfo(s,r)}))),B)}),n.inputSelector,m);B.setEventListeners(),h.addEventListener("click",(()=>{$.setInputValues(D.getAvatar()),$.open()}));const $=new i(p,((e,t)=>{let{avatar:s}=t;e.preventDefault(),x((()=>I.setUserProfileAvatar(s).then((()=>{D.setAvatar(s)}))),$)}),n.inputSelector,f);$.setEventListeners(),E.addEventListener("click",(()=>{P.open()}));const P=new i(b,((e,t)=>{let{title:s,link:r}=t;e.preventDefault(),x((()=>I.addNewCard(s,r).then((e=>{const t=A(e);q.addItem(t,"prepend"),L.reset(),w["card-add_form"].disableButton()}))),P,"Creating...")}),n.inputSelector,g);function V(e){T.open(e)}P.setEventListeners();const T=new class extends r{constructor(e,t){super(e),this._modalElements=t}open(e){let{name:t,link:s}=e;this._modalElements.image.src=s,this._modalElements.image.alt=t,this._modalElements.caption.textContent=t,super.open()}}(k,{image:C,caption:S});function j(e){const t=e.getInfo().isLiked?"unlikeCard":"likeCard";I[t](e.getInfo().id).then((t=>{e.likeCard(t.isLiked)})).catch((e=>{console.error(e)}))}function N(e){F.open(e)}T.setEventListeners();const F=new class extends r{constructor(e,t){super(e),this._handleSubmit=t}setEventListeners(){super.setEventListeners(),this._popup.addEventListener("submit",(e=>{this._handleSubmit(e,this._initiator)}))}open(e){this._initiator=e,super.open()}}(y,((e,t)=>{e.preventDefault(),I.deleteCard(t.getInfo().id).then((()=>{t.deleteCard(),F.close()})).catch((e=>{console.error(e)}))}));F.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,